import pytest
from ..utils.utils import PostgresContainer
from controlplane.datastore.config import DatastoreConfig
from controlplane.datastore.client import DatastoreClient
import time
from rich import print
from controlplane.datastore.types.vmliveness import (
    VmRegistrationInfo as DatastoreVmRegistrationInfo,
)
from vmagent.machineinfo.machineinfo import get_machine_info
from vmagent.machineinfo.config import MachineInfoConfig


@pytest.fixture(scope="session")
def datastore():
    """
    Start the Postgres container, wait for it to be healthy, and clean up after tests are done.
    """
    with PostgresContainer():
        print("‚¨Ü Postgres container launched")

        config = DatastoreConfig()
        client = DatastoreClient(config)
        print("üïï Waiting for DB to start...")

        start_time = time.time()
        while True:
            if time.time() - start_time > 120:
                raise RuntimeError("‚ùå Timed out waiting for DB to start")
            try:
                client.setup_db()
                break
            except Exception as e:
                print(e)
                print("üïï Waiting for DB to start...")
                time.sleep(1)
                continue
        print("‚úì DB setup")

        yield config, client


@pytest.fixture(scope="session")
def vm_registration_info():
    machine_info_config = MachineInfoConfig(use_fake=True)
    # Convert from SDK type to equivalent backend type. In the real world, this conversion happens
    # implicitly when the SDK sends data to the API, but here we need to do it manually. The backend
    # needs the to_heartbeat_orm() method, while the SDK version is autogenerated from the OpenAPI
    # spec and doesn't have that method.
    machine_info_sdk = get_machine_info(machine_info_config)  # type: SdkVmRegistrationInfo
    machine_info = DatastoreVmRegistrationInfo(**machine_info_sdk.model_dump())  # type: DatastoreVmRegistrationInfo
    return machine_info


@pytest.fixture(autouse=True)
def reset_db(datastore: tuple[DatastoreConfig, DatastoreClient]):
    """Make sure that every test starts with a clean DB"""
    config, client = datastore
    client.reset_db()
