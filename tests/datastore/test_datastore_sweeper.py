from controlplane.actors.datastore_sweeper import (
    DatastoreSweeperConfig,
    DatastoreSweeper,
)
from controlplane.datastore.config import DatastoreConfig
from controlplane.datastore.client import DatastoreClient
from ..utils.utils import print_test_function_name
import datetime
import time
from rich import print
from vmagent.machineinfo.machineinfo import get_machine_info
from vmagent.machineinfo.config import MachineInfoConfig
from controlplane.datastore.types.vmliveness import (
    VmRegistrationInfo as DatastoreVmRegistrationInfo,
)


VM_ID = "test-vm-id"


def test_sweeper(datastore: tuple[DatastoreConfig, DatastoreClient]):
    """
    Test that the sweeper actor deletes old data points
    """
    print_test_function_name()
    datastore_config, client = datastore

    machine_info_config = MachineInfoConfig(use_fake=True)
    # Convert from SDK type to equivalent backend type. In the real world, this conversion happens
    # implicitly when the SDK sends data to the API, but here we need to do it manually. The backend
    # needs the to_heartbeat_orm() method, while the SDK version is autogenerated from the OpenAPI
    # spec and doesn't have that method.
    machine_info_sdk = get_machine_info(machine_info_config)  # type: SdkVmRegistrationInfo
    machine_info = DatastoreVmRegistrationInfo(**machine_info_sdk.model_dump())  # type: DatastoreVmRegistrationInfo

    # Add 10 old data points and 10 recent ones
    now = datetime.datetime.now(datetime.timezone.utc)
    num_metrics = 10
    timestamps = [
        now - datetime.timedelta(seconds=(i + 1) * 120) for i in range(num_metrics)
    ]
    timestamps.extend(
        [now - datetime.timedelta(seconds=i * 0.1) for i in range(num_metrics)]
    )
    for ind, ts in enumerate(timestamps):
        client.add_cpu_measurement(
            vm_id=VM_ID,
            cpu_percents=[ind, ind, ind, ind],
            ts=ts,
        )

    # Confirm that we have 20 data points
    current_data = client.get_cpu_measurements(vm_ids=[VM_ID])
    assert (
        len(current_data) == num_metrics * 2
    ), f"Expected {num_metrics * 2} data points"

    # Start the sweeper so it runs frequently and deletes the 10 old data points
    datastore_sweeper_config = DatastoreSweeperConfig(
        sweep_interval_secs=1,
        data_retention_secs=60,
        reap_vms_interval_secs=1,
        vm_no_heartbeat_reap_secs=3,
    )
    sweeper = DatastoreSweeper.start(
        datastore_sweeper_config=datastore_sweeper_config,
        datastore_config=datastore_config,
    )

    # Test CPU timeseries cleanup
    try:
        time.sleep(2)

        # Confirm that we now only have 10 data points
        current_data = client.get_cpu_measurements(vm_ids=[VM_ID])
        assert (
            len(current_data) == num_metrics
        ), f"Expected {num_metrics} data points, but got {len(current_data)}"

        # Cleanup
        print("Sweeper metric cleanup test passed")
    except Exception as e:
        sweeper.stop()
        raise e

    # Test VM reaping
    try:
        client.register_vm(vm_id=VM_ID, registration_info=machine_info)
        vms = client.get_all_vms()
        assert len(vms) == 1, f"Expected live vms to be {[VM_ID]}, but got {vms}"
        time.sleep(5)
        vms = client.get_all_vms()
        assert len(vms) == 0, f"Expected there to be no live VMs, but got {vms}"
        print("Sweeper vm reaping test passed")
    finally:
        sweeper.stop()
