# AUTOGENERATED FILE DO NOT EDIT

from typing import cast, Any
import datetime
from sqlalchemy import Index
from sqlalchemy import String
from sqlalchemy.dialects.postgresql import JSONB
from sqlalchemy.orm import Mapped, mapped_column
from controlplane.datastore.types.vmmetrics.metric import (
    MetricBaseORM,
    MetricLatestBaseORM,
    MetricBaseModel,
    MetricLatestBaseModel,
)
from pydantic import BaseModel


metric_name = "METRIC_NAME_LOWERCASE"
# example METRIC_NAME_LOWERCASE metrics: #EXAMPLE_METRICS
metric_shape_db = METRIC_SHAPE_DB


# Custom Types
#CUSTOMTYPES

# Convert metrics column in DB to object fields as dict that can be passed to super().from_orm() as kwargs
#CONVERTFROMMETRICS

# Convert user-facing object fields to metrics column shape in DB
#CONVERTTOMETRICS

class METRIC_NAME_CAMELCASEMetricLatestORM(MetricLatestBaseORM):
    __tablename__ = f"machine_metric_METRIC_NAME_LOWERCASE_latest"
    metrics: Mapped[METRIC_SHAPE_DB] = mapped_column(METRIC_TYPE_DB, nullable=False)



class METRIC_NAME_CAMELCASEMetricORM(MetricBaseORM):
    __tablename__ = f"machine_metric_METRIC_NAME_LOWERCASE"
    metrics: Mapped[METRIC_SHAPE_DB] = mapped_column(METRIC_TYPE_DB, nullable=False)

    __table_args__ = (
        Index("idx_metric_METRIC_NAME_LOWERCASE_ts", "ts"),  # Creating the index
        Index("idx_metric_METRIC_NAME_LOWERCASE_vm_id_ts", "vm_id", "ts"),  # Composite index
    )


class METRIC_NAME_CAMELCASEMetricLatest(MetricLatestBaseModel):
    vm_id: str
    ts: datetime.datetime
#METRIC_OBJ_FIELDS
    @classmethod
    def from_orm(cls, orm: METRIC_NAME_CAMELCASEMetricLatestORM, **kwargs) -> "METRIC_NAME_CAMELCASEMetricLatest":
        instance = super().from_orm(orm=orm, **convert_from_metrics(orm.metrics))
        return cast(METRIC_NAME_CAMELCASEMetricLatest, instance)

    def to_METRIC_NAME_LOWERCASE_measurement(self) -> "METRIC_NAME_CAMELCASEMeasurement":
        kwargs = self.model_dump()
        return METRIC_NAME_CAMELCASEMeasurement(**kwargs)


class METRIC_NAME_CAMELCASEMetric(MetricBaseModel):
    metric_id: str
    vm_id: str
    ts: datetime.datetime
#METRIC_OBJ_FIELDS
    @classmethod
    def from_orm(cls, orm: METRIC_NAME_CAMELCASEMetricORM, **kwargs) -> "METRIC_NAME_CAMELCASEMetric":
        instance = super().from_orm(orm=orm, **convert_from_metrics(orm.metrics))
        return cast(METRIC_NAME_CAMELCASEMetric, instance)

    def to_METRIC_NAME_LOWERCASE_measurement(self) -> "METRIC_NAME_CAMELCASEMeasurement":
        kwargs = self.model_dump()
        kwargs.pop("metric_id")
        return METRIC_NAME_CAMELCASEMeasurement(**kwargs)


class METRIC_NAME_CAMELCASEMeasurement(BaseModel):
    """
    A measurement of METRIC_NAME_CAMELCASE
    """
    # This is the user-facing object that is sent to and from the REST endpoint
    vm_id: str
    ts: datetime.datetime
#METRIC_OBJ_FIELDS

    def to_metrics(self) -> METRIC_SHAPE_DB:
        return convert_to_metrics(self)
