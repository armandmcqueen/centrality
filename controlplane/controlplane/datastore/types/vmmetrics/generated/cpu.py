# AUTOGENERATED FILE DO NOT EDIT

from typing import cast

from sqlalchemy import Index
from sqlalchemy.dialects.postgresql import JSONB
from sqlalchemy.orm import Mapped, mapped_column
from controlplane.datastore.types.vmmetrics.metric import (
    MetricBaseORM,
    MetricLatestBaseORM,
    MetricBaseModel,
    MetricLatestBaseModel,
)


metric_name = "cpu"
# example cpu metrics: [cpuWWW, cpuXXX, cpuYYY, cpuZZZ]
metric_shape_db = list[float]


# Custom Types
CpuPercents = list[float]


# Convert metrics column in DB to object fields as dict that can be passed to super().from_orm() as kwargs
def convert(metrics: list[float]) -> dict[str, CpuPercents]:
    return dict(cpu_percents=metrics)


class CpuMetricLatestORM(MetricLatestBaseORM):
    __tablename__ = "machine_metric_cpu_latest"
    metrics: Mapped[list[float]] = mapped_column(JSONB, nullable=False)


class CpuMetricORM(MetricBaseORM):
    __tablename__ = "machine_metric_cpu"
    metrics: Mapped[list[float]] = mapped_column(JSONB, nullable=False)

    __table_args__ = (
        Index("idx_metric_cpu_ts", "ts"),  # Creating the index
        Index("idx_metric_cpu_vm_id_ts", "vm_id", "ts"),  # Composite index
    )


class CpuMetricLatest(MetricLatestBaseModel):
    cpu_percents: CpuPercents

    @classmethod
    def from_orm(cls, orm: CpuMetricLatestORM, **kwargs) -> "CpuMetricLatest":
        instance = super().from_orm(orm=orm, **convert(orm.metrics))
        return cast(CpuMetricLatest, instance)


class CpuMetric(MetricBaseModel):
    cpu_percents: CpuPercents

    @classmethod
    def from_orm(cls, orm: CpuMetricORM, **kwargs) -> "CpuMetric":
        instance = super().from_orm(orm=orm, **convert(orm.metrics))
        return cast(CpuMetric, instance)
