# AUTOGENERATED FILE DO NOT EDIT

from typing import cast

from sqlalchemy import Index
from sqlalchemy.dialects.postgresql import JSONB
from sqlalchemy.orm import Mapped, mapped_column
from controlplane.datastore.types.vmmetrics.metric import (
    MetricBaseORM,
    MetricLatestBaseORM,
    MetricBaseModel,
    MetricLatestBaseModel,
)


metric_name = "memory"
# example memory metrics: [1000, 2000]
metric_shape_db = list[float]


# Custom Types


# Convert metrics column in DB to object fields as dict that can be passed to super().from_orm() as kwargs
def convert(metrics: list[float]) -> dict[str, float]:
    free_memory_mb = metrics[0]
    total_memory_mb = metrics[1]
    return dict(free_memory_mb=free_memory_mb, total_memory_mb=total_memory_mb)


class MemoryMetricLatestORM(MetricLatestBaseORM):
    __tablename__ = "machine_metric_memory_latest"
    metrics: Mapped[list[float]] = mapped_column(JSONB, nullable=False)


class MemoryMetricORM(MetricBaseORM):
    __tablename__ = "machine_metric_memory"
    metrics: Mapped[list[float]] = mapped_column(JSONB, nullable=False)

    __table_args__ = (
        Index("idx_metric_memory_ts", "ts"),  # Creating the index
        Index("idx_metric_memory_vm_id_ts", "vm_id", "ts"),  # Composite index
    )


class MemoryMetricLatest(MetricLatestBaseModel):
    free_memory_mb: float
    total_memory_mb: float

    @classmethod
    def from_orm(cls, orm: MemoryMetricLatestORM, **kwargs) -> "MemoryMetricLatest":
        instance = super().from_orm(orm=orm, **convert(orm.metrics))
        return cast(MemoryMetricLatest, instance)


class MemoryMetric(MetricBaseModel):
    free_memory_mb: float
    total_memory_mb: float

    @classmethod
    def from_orm(cls, orm: MemoryMetricORM, **kwargs) -> "MemoryMetric":
        instance = super().from_orm(orm=orm, **convert(orm.metrics))
        return cast(MemoryMetric, instance)
