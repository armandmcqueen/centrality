# AUTOGENERATED FILE DO NOT EDIT

from typing import cast, Any
import datetime
from sqlalchemy import Index
from sqlalchemy.dialects.postgresql import JSONB
from sqlalchemy.orm import Mapped, mapped_column
from controlplane.datastore.types.vmmetrics.metric import (
    MetricBaseORM,
    MetricLatestBaseORM,
    MetricBaseModel,
    MetricLatestBaseModel,
)
from pydantic import BaseModel


metric_name = "gpu_utilization"
# example gpu_utilization metrics: [20, 40, 60, 80]
metric_shape_db = list[float]


# Custom Types


# Convert metrics column in DB to object fields as dict that can be passed to super().from_orm() as kwargs
def convert_from_metrics(metrics: list[float]) -> dict[str, list[float]]:
    return dict(gpu_percents=metrics)


# Convert user-facing object fields to metrics column shape in DB
def convert_to_metrics(self: Any) -> list[float]:
    return self.gpu_percents


class GpuUtilizationMetricLatestORM(MetricLatestBaseORM):
    __tablename__ = "machine_metric_gpu_utilization_latest"
    metrics: Mapped[list[float]] = mapped_column(JSONB, nullable=False)


class GpuUtilizationMetricORM(MetricBaseORM):
    __tablename__ = "machine_metric_gpu_utilization"
    metrics: Mapped[list[float]] = mapped_column(JSONB, nullable=False)

    __table_args__ = (
        Index("idx_metric_gpu_utilization_ts", "ts"),  # Creating the index
        Index("idx_metric_gpu_utilization_vm_id_ts", "vm_id", "ts"),  # Composite index
    )


class GpuUtilizationMetricLatest(MetricLatestBaseModel):
    vm_id: str
    ts: datetime.datetime
    gpu_percents: list[float]

    @classmethod
    def from_orm(
        cls, orm: GpuUtilizationMetricLatestORM, **kwargs
    ) -> "GpuUtilizationMetricLatest":
        instance = super().from_orm(orm=orm, **convert_from_metrics(orm.metrics))
        return cast(GpuUtilizationMetricLatest, instance)

    def to_gpu_utilization_measurement(self) -> "GpuUtilizationMeasurement":
        kwargs = self.model_dump()
        return GpuUtilizationMeasurement(**kwargs)


class GpuUtilizationMetric(MetricBaseModel):
    metric_id: str
    vm_id: str
    ts: datetime.datetime
    gpu_percents: list[float]

    @classmethod
    def from_orm(cls, orm: GpuUtilizationMetricORM, **kwargs) -> "GpuUtilizationMetric":
        instance = super().from_orm(orm=orm, **convert_from_metrics(orm.metrics))
        return cast(GpuUtilizationMetric, instance)

    def to_gpu_utilization_measurement(self) -> "GpuUtilizationMeasurement":
        kwargs = self.model_dump()
        kwargs.pop("metric_id")
        return GpuUtilizationMeasurement(**kwargs)


class GpuUtilizationMeasurement(BaseModel):
    """
    A measurement of GpuUtilization
    """

    # This is the user-facing object that is sent to and from the REST endpoint
    vm_id: str
    ts: datetime.datetime
    gpu_percents: list[float]

    def to_metrics(self) -> list[float]:
        return convert_to_metrics(self)
