# AUTOGENERATED FILE DO NOT EDIT

from typing import cast

from sqlalchemy import Index
from sqlalchemy.dialects.postgresql import JSONB
from sqlalchemy.orm import Mapped, mapped_column
from controlplane.datastore.types.vmmetrics.metric import (
    MetricBaseORM,
    MetricLatestBaseORM,
    MetricBaseModel,
    MetricLatestBaseModel,
)
from pydantic import BaseModel


metric_name = "disk_throughput"
# example disk_throughput metrics: {disk1: [read, write], disk2: [read, write]}
metric_shape_db = dict[str, list[float]]


# Custom Types
class DiskThroughput(BaseModel):
    read_mbps: float
    write_mbps: float


# Convert metrics column in DB to object fields as dict that can be passed to super().from_orm() as kwargs
def convert(metrics: dict[str, list[float]]) -> dict[str, dict[str, DiskThroughput]]:
    throughput: dict[str, DiskThroughput] = {
        disk: DiskThroughput(
            read_mbps=throughput_vals[0], write_mbps=throughput_vals[1]
        )
        for disk, throughput_vals in metrics.items()
    }
    return dict(throughput=throughput)


class DiskThroughputMetricLatestORM(MetricLatestBaseORM):
    __tablename__ = "machine_metric_disk_throughput_latest"
    metrics: Mapped[dict[str, list[float]]] = mapped_column(JSONB, nullable=False)


class DiskThroughputMetricORM(MetricBaseORM):
    __tablename__ = "machine_metric_disk_throughput"
    metrics: Mapped[dict[str, list[float]]] = mapped_column(JSONB, nullable=False)

    __table_args__ = (
        Index("idx_metric_disk_throughput_ts", "ts"),  # Creating the index
        Index("idx_metric_disk_throughput_vm_id_ts", "vm_id", "ts"),  # Composite index
    )


class DiskThroughputMetricLatest(MetricLatestBaseModel):
    throughput: dict[str, DiskThroughput]

    @classmethod
    def from_orm(
        cls, orm: DiskThroughputMetricLatestORM, **kwargs
    ) -> "DiskThroughputMetricLatest":
        instance = super().from_orm(orm=orm, **convert(orm.metrics))
        return cast(DiskThroughputMetricLatest, instance)


class DiskThroughputMetric(MetricBaseModel):
    throughput: dict[str, DiskThroughput]

    @classmethod
    def from_orm(cls, orm: DiskThroughputMetricORM, **kwargs) -> "DiskThroughputMetric":
        instance = super().from_orm(orm=orm, **convert(orm.metrics))
        return cast(DiskThroughputMetric, instance)
