# AUTOGENERATED FILE DO NOT EDIT

from typing import cast

from sqlalchemy import Index
from sqlalchemy.dialects.postgresql import JSONB
from sqlalchemy.orm import Mapped, mapped_column
from controlplane.datastore.types.vmmetrics.metric import (
    MetricBaseORM,
    MetricLatestBaseORM,
    MetricBaseModel,
    MetricLatestBaseModel,
)


metric_name = "disk_iops"
# example disk_iops metrics: {disk1: iopsXXX, disk2: iopsYYY}
metric_shape_db = dict[str, float]


# Custom Types
PerDiskIops = dict[str, float]


# Convert metrics column in DB to object fields as dict that can be passed to super().from_orm() as kwargs
def convert(metrics: PerDiskIops) -> dict[str, PerDiskIops]:
    return dict(iops=metrics)


class DiskIopsMetricLatestORM(MetricLatestBaseORM):
    __tablename__ = "machine_metric_disk_iops_latest"
    metrics: Mapped[dict[str, float]] = mapped_column(JSONB, nullable=False)


class DiskIopsMetricORM(MetricBaseORM):
    __tablename__ = "machine_metric_disk_iops"
    metrics: Mapped[dict[str, float]] = mapped_column(JSONB, nullable=False)

    __table_args__ = (
        Index("idx_metric_disk_iops_ts", "ts"),  # Creating the index
        Index("idx_metric_disk_iops_vm_id_ts", "vm_id", "ts"),  # Composite index
    )


class DiskIopsMetricLatest(MetricLatestBaseModel):
    iops: PerDiskIops

    @classmethod
    def from_orm(cls, orm: DiskIopsMetricLatestORM, **kwargs) -> "DiskIopsMetricLatest":
        instance = super().from_orm(orm=orm, **convert(orm.metrics))
        return cast(DiskIopsMetricLatest, instance)


class DiskIopsMetric(MetricBaseModel):
    iops: PerDiskIops

    @classmethod
    def from_orm(cls, orm: DiskIopsMetricORM, **kwargs) -> "DiskIopsMetric":
        instance = super().from_orm(orm=orm, **convert(orm.metrics))
        return cast(DiskIopsMetric, instance)
