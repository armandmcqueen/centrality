# AUTOGENERATED FILE DO NOT EDIT

from typing import cast, Any
import datetime
from sqlalchemy import Index
from sqlalchemy import String
from sqlalchemy.orm import Mapped, mapped_column
from controlplane.datastore.types.metrics.metric import (
    MetricBaseORM,
    MetricLatestBaseORM,
    MetricBaseModel,
    MetricLatestBaseModel,
)
from pydantic import BaseModel


metric_name = "nvidia_smi"
# example nvidia_smi metrics: N/A
metric_shape_db = str


# Custom Types


# Convert metrics column in DB to object fields as dict that can be passed to super().from_orm() as kwargs
def convert_from_metrics(metrics: str) -> dict[str, str]:
    return dict(output=metrics)


# Convert user-facing object fields to metrics column shape in DB
def convert_to_metrics(self: Any) -> str:
    return self.output


class NvidiaSmiMetricLatestORM(MetricLatestBaseORM):
    __tablename__ = "machine_metric_nvidia_smi_latest"
    metrics: Mapped[str] = mapped_column(String, nullable=False)


class NvidiaSmiMetricORM(MetricBaseORM):
    __tablename__ = "machine_metric_nvidia_smi"
    metrics: Mapped[str] = mapped_column(String, nullable=False)

    __table_args__ = (
        Index("idx_metric_nvidia_smi_ts", "ts"),  # Creating the index
        Index(
            "idx_metric_nvidia_smi_machine_id_ts", "machine_id", "ts"
        ),  # Composite index
    )


class NvidiaSmiMetricLatest(MetricLatestBaseModel):
    machine_id: str
    ts: datetime.datetime
    output: str

    @classmethod
    def from_orm(
        cls, orm: NvidiaSmiMetricLatestORM, **kwargs
    ) -> "NvidiaSmiMetricLatest":
        instance = super().from_orm(orm=orm, **convert_from_metrics(orm.metrics))
        return cast(NvidiaSmiMetricLatest, instance)

    def to_nvidia_smi_measurement(self) -> "NvidiaSmiMeasurement":
        kwargs = self.model_dump()
        return NvidiaSmiMeasurement(**kwargs)


class NvidiaSmiMetric(MetricBaseModel):
    metric_id: str
    machine_id: str
    ts: datetime.datetime
    output: str

    @classmethod
    def from_orm(cls, orm: NvidiaSmiMetricORM, **kwargs) -> "NvidiaSmiMetric":
        instance = super().from_orm(orm=orm, **convert_from_metrics(orm.metrics))
        return cast(NvidiaSmiMetric, instance)

    def to_nvidia_smi_measurement(self) -> "NvidiaSmiMeasurement":
        kwargs = self.model_dump()
        kwargs.pop("metric_id")
        return NvidiaSmiMeasurement(**kwargs)


class NvidiaSmiMeasurement(BaseModel):
    """
    A measurement of NvidiaSmi
    """

    # This is the user-facing object that is sent to and from the REST endpoint
    machine_id: str
    ts: datetime.datetime
    output: str

    def to_metrics(self) -> str:
        return convert_to_metrics(self)
