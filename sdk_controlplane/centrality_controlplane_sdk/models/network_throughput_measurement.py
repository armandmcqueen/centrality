# coding: utf-8

"""
    centrality-controlplane

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from centrality_controlplane_sdk.models.throughput import Throughput
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class NetworkThroughputMeasurement(BaseModel):
    """
    A measurement of NetworkThroughput
    """ # noqa: E501
    machine_id: StrictStr = Field(description="The machine_id of the machine that generated this measurement")
    ts: datetime = Field(description="The timestamp of the measurement")
    per_interface: Dict[str, Throughput] = Field(description="A dict with throughput for each network interface with the interface name as the key")
    total: Throughput
    __properties: ClassVar[List[str]] = ["machine_id", "ts", "per_interface", "total"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of NetworkThroughputMeasurement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of total
        if self.total:
            _dict['total'] = self.total.to_dict()
        # set to None if per_interface (nullable) is None
        # and model_fields_set contains the field
        if self.per_interface is None and "per_interface" in self.model_fields_set:
            _dict['per_interface'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of NetworkThroughputMeasurement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        print("network_throughput_measurement.from_dict: obj: ", obj)
        _obj = cls.model_validate({
            "machine_id": obj.get("machine_id"),
            "ts": obj.get("ts"),
            "total": Throughput.from_dict(obj.get("total")) if obj.get("total") is not None else None,
            "per_interface": {
                interface_name: Throughput.from_dict(throughput) for interface_name, throughput in obj.get("per_interface").items()
            },
        })
        return _obj


